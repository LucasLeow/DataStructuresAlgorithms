================================================================================================
Heaps
================================================================================================
    - Heap is a complete Binary Tree data structure that satisfies the heap property
    - Tree must always be complete to be considered a Heap
    - Heap Tree allow for duplicates (unlike BST)

    Heap Property:
        - the value of each node is lesser or greater than the value of its children nodes

        - lesser = Minimum Heap (min value at top)
            - node value is lesser than its children node values

        - greater = Maximum Heap (max value at top)
            - node value is greater than children node values

================================================================================================
Heap Implementation (In Java)
================================================================================================
    1) can use Tree structure template (See 5_Trees)

    2) can use ArrayList to represent heap (aka list in python)
        * sometimes, idx 0 left empty
        - leftChild = 2 * parentIndex
        - rightChild = 2 * parentIndex + 1

        - parentIdx = int (childIdx / 2) // must be integer division to drop truncate decimal

================================================================================================
Heap Insertion
================================================================================================

    1) always insert new value at next available slot to keep tree complete (aka end of ArrayList)
    2) compare newly inserted value with parent value
        - for max heap, if greater, then swap
        - for min heap, if lesser, then swap
        - if not, end OR if at top of tree, then end

    3) repeat step 2 until condition satisfied