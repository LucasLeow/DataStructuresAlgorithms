================================================================================================
Heaps
================================================================================================
    - Heap is a complete Binary Tree data structure that satisfies the heap property
    - Tree must always be complete to be considered a Heap
    - Heap Tree allow for duplicates (unlike BST)

    Heap Property:
        - the value of each node is lesser or greater than the value of its children nodes

        - lesser = Minimum Heap (min value at top)
            - node value is lesser than its children node values

        - greater = Maximum Heap (max value at top)
            - node value is greater than children node values

================================================================================================
Heap Implementation (In Java)
================================================================================================
    1) can use Tree structure template (See 5_Trees)

    2) can use ArrayList to represent heap (aka list in python)

        * For start idx = 1 (sometimes idx 0 left empty)
        - leftChild = 2 * parentIndex
        - rightChild = 2 * parentIndex + 1
        - parentIdx = int (childIdx / 2) // must be integer division to drop truncate decimal

        * For start idx = 0
        - leftChild = 2 * parentIdx + 1
        - rightChild = 2 * parentIdx + 2
        - parentIdx = int (childIdx - 1) / 2

================================================================================================
Heap Insertion
================================================================================================

    1) always insert new value at next available slot to keep tree complete (aka end of ArrayList)
    2) compare newly inserted value with parent value
        - for max heap, if greater, then swap
        - for min heap, if lesser, then swap
        - if not, end OR if at top of tree, then end

    3) repeat step 2 until condition satisfied

================================================================================================
Heap Removal
================================================================================================

    1) always remove & return only the root node (top item)
    2) rearrange node to become a valid heap (Complete tree) in 1 step
        - i.e move bottom right most node to top of heap
    3) perform comparison between nodes then swap as required
        - parent compare to children nodes
            - highest value of child to be swapped (for max heap)
            - lowest value of child to be swapped (for min heap)

    Possible heap cases:
        1) Empty heap
        2) Only 1 item in heap
        3) Normal heap (>= 2 nodes)