====================================================================================================
Is Anagram
====================================================================================================
Given two strings s and t, return true if the two strings are anagrams of each other, otherwise return false.

An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.

Example 1:

Input: s = "racecar", t = "carrace"

Output: true
Example 2:

Input: s = "jar", t = "jam"

Output: false
Constraints:

s and t consist of lowercase English letters.

====================================================================================================

Solution 1: By sorting (dont need to care if lower or upper case)

    class Solution {
        public boolean isAnagram(String s, String t) {
            if (s.length() != t.length()) return false;

            char[] s_chars = s.toCharArray();
            char[] t_chars = t.toCharArray();

            Arrays.sort(s_chars);
            Arrays.sort(t_chars);

            for (int i = 0; i < s_chars.length; i++) {
                if (s_chars[i] != t_chars[i]) return false;
            }
            return true;
        }
    }

====================================================================================================

Solution 2: By counting all alphabets

    - there are 26 alpabets (constraint that characters are all lowercase)

    class Solution {
        public boolean isAnagram(String s, String t) {
            if (s.length() != t.length()) return false;
            int[] charCount = new int[26];

            for (int i = 0; i < s.length(); i++) {
                charCount[s.charAt(i) - 'a']++;
                charCount[t.charAt(i) -'a']--;
            }

            // if anagram, all should become 0
            for (int n: charCount) {
                if (n != 0) return false;
            }
            return true;
        }
    }
