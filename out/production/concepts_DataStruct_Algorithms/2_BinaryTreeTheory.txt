============================================================================================
Binary Trees
============================================================================================
    - Each node in tree have at most 2 children
        - left child & right child

    * Node without child is known as leaf node
    * root node is at depth 0 (Level 0)
    - height = max depth of tree
    - max nodes possible at level i = 2^i (for binary trees)
        Level 0 = 2^0 = 1 node
        Level 1 = 2^1 = 2 nodes (2 nodes at level 1)
        Level 2 = 2^2 = 4 nodes (4 nodes at level 2)
    
        Max nodes possible = 2^(h) - 1, h = no. of levels

        height of perfect binary tree = log2(n+1) - 1, n = no. of nodes
            - *perfect binary tree = all nodes present at every level of tree

============================================================================================
Binary Tree Terminology
============================================================================================

    - Balanced Binary Tree -
        - height of left & right subtree differ by not more than 1
        diff = |hleft - hright|
        height = no. of edges in longest path from root to leaf
        
    - Strict Binary Tree -
        - Each node can have 2 or 0 children, nothing in between

    - Complete Binary Tree -
        - all levels except last level completely filled
        - last level have nodes as far left as possible
    
    - Perfect Binary Tree -
        - entire tree completely filled with nodes

============================================================================================
What problem Binary tree solve 
============================================================================================
    - Implemented by "Set" data structure (only unique values)
        - using Binary Search Trees

== Time complexity (Binary Search Tree) ==
    Searching: O(logN)
    Inserting: O(logN)


== Searching Binary Search Trees ==
    1) Breadth first search
    2) Depth first search
        - in-order traversal
        - pre-order traversal
        - post-order traversal

============================================================================================
Binary Search Trees
============================================================================================
        - Binary Tree with certain order
            - nodes values are unique (no duplicate allowed)
             - left child node is smaller, right child node is greater than the parent

    * taking any node as reference
        - all nodes branching leftwards will be smaller
        - all nodes branching rightwards will be greater

============================================================================================
Binary Search Trees Time Complexity
============================================================================================
    - Each level consist of 2^n - 1 nodes (n = depth)
    - insertion & deletion = O(log n) (Best case for Perfect BST)
        - compare value (divide n conquer algorithm)
            - if lower, go left branch
            - if higher, go right branch

    * worst case = BST that always have node values higher the previous
        - then BST becomes a linkedlist (only have right branches)
        - insertion & deletion is O(n)