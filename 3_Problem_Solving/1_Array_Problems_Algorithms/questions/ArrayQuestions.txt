===============================================================================================
1) Find peak element not smaller than its neighbours
===============================================================================================
Given an arr of n elements, that is first strictly increasing and then maybe strictly decreasing, find peak element in array.

eg:
    input: {10, 20, 15, 2, 23, 90, 67}
    Output: 20 or 90
    - 20 has neighbours less than itself, 90 also similar

    Edge case:
        - if strictly increasing, last element is peak
        - if strictly decreasing, first element is peak
        - if all value same, all values are peak

    Logic:
        - if first element > second element, return first element (strictly decreasing case)
        - if last element > 2nd last element, return last element (strictly increasing)
        - loop from 2nd idx (1 to N - 1), check i with i-1 & i+1 idx. return if i value larger than both


===============================================================================================
2) Find min / max element of array
===============================================================================================
Given an arr, write a function to find the minimum and maximum element in it

    Logic:
        - if arr.length == 1, min = max = element
        - init 2 var min = Integer.MAX_VALUE, max = Integer.MIN_VALUE
        - iterate through array, if arr[i] > max, max = arr[i] & arr[i] < min, min = arr[i]



===============================================================================================
4) Shuffle the array - 1
===============================================================================================
Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn]
Return the array in the form [x1,y1,x2,y2,...,xn,yn]

eg
Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7] 

Learnings:
    - create new array & use 2 pointers to traverse array
    - write down output idx to observe pattern, eg idx 0 1 2 3 4 5 -> 0 3 1 4 2 5

class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] newArr = new int[nums.length];
        int const_n = n;

        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                newArr[i] = nums[n - const_n];
                n++;
            } else {
                newArr[i] = nums[n - 1]; // -1 to offset n++ from even side
            }
        }
        return newArr;
    }
}

===============================================================================================
6) Widest width between 2 points (with no points in-between)
===============================================================================================

Given n points on a 2D plane where points[i] = [xi, yi], 
Return the widest vertical width between two points such that no points between the 2 other points.

* Plot points on graph to visualize

Input: points = [[8,7],[9,9],[7,4],[9,7]]
Output: 1 (widest width with no point in between is between 7 to 8 & 8 to 9)

Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
Output: 3 (widest width with no points in between is 5 to 8 which is 3)

Hint:
    - y-axis values are unrequired.
    - write logic to retrieve x-axis values into arr then sort values
    - create max_width variable & compare between adjacent elements of sorted x-axis array
    - account for array index out of bound exception in guard clause

    public int maxWidth(int[][] points) {
        int[] x_coords = new int[points.length];
        int max_width = 0;

        for (int i = 0; i < points.length; i++) {
            x_coords[i] = points[i][0];
        }

        Arrays.sort(x_coords);

        for (int i = 0; i < x_coords.length; i++) {
            if (i+1 < x_coords.length && x_coords[i+1] - x_coords[i] >= max_width) {
                max_width = x_coords[i+1] - x_coords[i]
            }
        }
        return max_width;
    }

===============================================================================================
7) Reversing an Array
===============================================================================================
    
    - when reversing an array, middle of array need not be reversed (pivot point)
        - only need to iterate to half of array
    
    Solution:

        public class ReverseArray {
            public static void reverseArr(int[] arr) {
                int temp;
                int n = arr.length;
                for (int i = 0; i < n / 2; i++) {
                    temp = arr[i];
                    arr[i] = arr[n - i - 1];
                    arr[n - i - 1] = temp;
                }
            }
        }